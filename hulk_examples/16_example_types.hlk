type Point {
    x: Number = 0;
    y: Number = 0;

    getX(): Number => x;
    getY(): Number => y;

    setX(x: Number): Number => self.x := x;
    setY(y: Number): Number => self.y := y;
}

type PointSecond(x: Number, y: Number) {
    x: Number = x;
    y: Number = y;

    getX(): Number => x;
    getY(): Number => y;

    setX(x: Number): Number => x := x;
    setY(y: Number): Number => y := y;
}

let pt: Point = new Point() in
    print("x: " @ pt.getX() @ "; y: " @ pt.getY());
let pt: PointSecond = new PointSecond(3,4) in
    print("x: " @ pt.getX() @ "; y: " @ pt.getY());

type PolarPoint inherits PointSecond {
    rho(): Number => sqrt(self.getX() ^ 2 + self.getY() ^ 2);
}

let pt: PolarPoint = new PolarPoint(3,4) in
    print("rho: " @ pt.rho());

type PolarPoint(phi: Number, rho: Number) inherits Point(rho * sin(phi), rho * cos(phi)) {
}

type Person(firstname: String, lastname: String) {
    firstname: String = firstname;
    lastname: String = lastname;

    name(): String => self.firstname @@ self.lastname;
}

type Knight inherits Person {
    name(): String => "Sir" @@ base();
}

let p: Knight = new Knight("Phil", "Collins") in
    print(p.name()); // prints Sir Phil Collins